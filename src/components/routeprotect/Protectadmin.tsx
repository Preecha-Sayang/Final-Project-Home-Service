import { ReactNode, useEffect, useState } from "react";
import { useRouter } from "next/router";
import Swal from "sweetalert2";

type ProtectedRouteProps = {
  children: ReactNode;
  role: "admin" | "technician";
};

export const AdminProtectedRoute = ({ children, role }: ProtectedRouteProps) => {
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [mounted, setMounted] = useState(false);

  // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Hydration Error
  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    if (!mounted) return;

    const checkLogin = async () => {
      try {
        const res = await fetch("/api/admin/me", { credentials: "include" });
        const data = await res.json();

        // ‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login
        if (!data.admin) {
          await Swal.fire({
            icon: "warning",
            title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô",
            confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          });
          router.replace("/admin/login");
          return;
        }

        // ‚ö†Ô∏è login ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà role ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
        if (data.admin.role !== role) {
          await Swal.fire({
            icon: "error",
            title: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ",
            confirmButtonText: "‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
          });
          router.replace("/admin/login");
          return;
        }

        // ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        setLoading(false);
      } catch (err) {
        await Swal.fire({
          icon: "error",
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        });
        router.replace("/admin/login");
      }
    };

    checkLogin();
  }, [mounted, router, role]);

  if (!mounted || loading) return ( <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50"> <div className="w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mb-4"></div> <p className="text-gray-600 text-lg font-medium">Loading...</p> </div> );
  return <>{children}</>;
};

// ===========================================
// üîπ ‡∏´‡∏ô‡πâ‡∏≤ Login (‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡πâ‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß)
// ===========================================
type AuthRouteProps = { children: ReactNode };

export const AdminAuthRoute = ({ children }: AuthRouteProps) => {
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    if (!mounted) return;

    const checkLogin = async () => {
      try {
        const res = await fetch("/api/admin/me", { credentials: "include" });
        const data = await res.json();

        // ‚úÖ ‡∏ñ‡πâ‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ /admin/login
        if (data.admin) {
          await Swal.fire({
            icon: "info",
            title: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß",
            confirmButtonText: "‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard",
          });

          if (data.admin.role === "admin") {
            router.replace("/admin/categories");
          } else if (data.admin.role === "technician") {
            router.replace("/technician");
          }
        } else {
          setLoading(false);
        }
      } catch {
        setLoading(false);
      }
    };

    checkLogin();
  }, [mounted, router]);

  if (!mounted || loading) return ( <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50"> <div className="w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mb-4"></div> <p className="text-gray-600 text-lg font-medium">Loading...</p> </div> );
  return <>{children}</>;
};
